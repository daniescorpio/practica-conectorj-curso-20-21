package chat;

import chat.model.ChatRoom;
import chat.model.Message;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Controlador de la aplicación. Por favor, revise detenidamente la clase y complete las partes omitidas
 * atendiendo a los comentarios indicados mediante @TODO_
 */
public class Controller {

    private final String DB_SERVER = "localhost";
    private final int DB_PORT = 3306;
    private final String DB_NAME = "chat";
    private final String DB_USER = "root";
    private final String DB_PASS = "root";

    private Connection connection;

    /**
     * Crea un nuevo controlador
     */
    public Controller () {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");

            String url = "jdbc:mysql://" + DB_SERVER + ":" + DB_PORT + "/" + DB_NAME;
            this.connection = DriverManager.getConnection(url, DB_USER, DB_PASS);

        } catch (Exception e) {
            System.err.println("Ha ocurrido un error al conectar con la base de datos");
            e.printStackTrace();
        }
    }

    /**
     * Crea un nuevo usuario en la aplicación
     * @param nickname nombre de usuario
     * @return id del nuevo usuario creado
     * @throws SQLException
     */
    public long createUser(String nickname) throws SQLException {
        final String query = "INSERT INTO users (username) VALUES (?)";

        PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setString(1, nickname);
        preparedStatement.executeUpdate();
        long autogeneratedId = this.getAutogeneratedId(preparedStatement);

        preparedStatement.close();
        return autogeneratedId;
    }

    /**
     * Crea una nueva sala de chat
     * @param userpk id del usuario que crea la sala de chat
     * @param CRName nombre de la sala de chat
     * @return id de la nueva sala de chat creada
     * @throws SQLException
     */
    public long createChatRoom (long userpk, String CRName) throws SQLException {
        final String query = "INSERT INTO chatrooms (name, createdBy) VALUES (?, ?)";

        PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setString(1, CRName);
        preparedStatement.setLong(2, userpk);
        preparedStatement.executeUpdate();
        long autogeneratedId = this.getAutogeneratedId(preparedStatement);

        preparedStatement.close();
        return autogeneratedId;
    }

    /**
     * Crea un nuevo mensaje en una sala de chat
     * @param userpk id del usuario que crea el mensaje
     * @param chatRoompk id de la sala de chat en la que se crea el mensaje
     * @param content contenido del mensaje
     * @throws SQLException
     */
    public void sendMessage (long userpk, long chatRoompk, String content) throws SQLException {
        final String query = "INSERT INTO messages (text, chatRoom, createdBy) VALUES (?, ?, ?)";

        PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setString(1, content);
        preparedStatement.setLong(2, chatRoompk);
        preparedStatement.setLong(3, userpk);
        preparedStatement.executeUpdate();
        preparedStatement.close();
    }

    /**
     * Recupera los mensajes de una sala de chat
     * @param chatRoompk id de la sala de chat
     * @return Lista de mensajes
     * @throws SQLException
     */
    public List<Message> getMessages (long chatRoompk) throws SQLException {
        List<Message> messages = new ArrayList<>();
        final String query = "SELECT text, username FROM messages, users " +
                "WHERE messages.createdBy=users.id AND chatRoom = ?";

        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setLong(1, chatRoompk);
        ResultSet resultSet = preparedStatement.executeQuery();
        while (resultSet.next()) {
            messages.add(new Message(
                    resultSet.getString("text"),
                    resultSet.getString("username"))
            );
        }
        preparedStatement.close();
        return messages;
    }

    /**
     * Recupera un listado con todas las salas de chat
     * @return listado con las salas de chat
     * @throws SQLException
     */
    public List<ChatRoom> getChatRooms () throws SQLException {
        List<ChatRoom> rooms = new ArrayList<>();
        final String query = "SELECT id, name FROM chatrooms";

        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);
        while (resultSet.next()) {
            rooms.add(new ChatRoom(
                    resultSet.getInt("id"),
                    resultSet.getString("name"))
            );
        }
        statement.close();
        return rooms;
    }

    /**
     * Devuelve el id generado por un Statement
     * @param stmt el Statement
     * @return el id
     * @throws SQLException
     */
    private long getAutogeneratedId (Statement stmt) throws SQLException {
        ResultSet keys = stmt.getGeneratedKeys();
        keys.next();
        return keys.getLong(1);
    }

    /**
     * Borra los mensajes de un chat y de un usuario específico
     * @param nickname el nombre (string) del usuario
     * @param chatRoompk el ID de la sala de chat
     * @return el número de mensajes borrados
     * @throws SQLException
     */
    public int deleteMessages (String nickname, long chatRoompk) throws SQLException {
        final String query = "DELETE FROM messages " +
                "WHERE createdBy = (SELECT users.id FROM users WHERE username = ?)" +
                "AND messages.chatRoom = ?";

        PreparedStatement preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, nickname);
        preparedStatement.setLong(2, chatRoompk);
        int deletedMessages = preparedStatement.executeUpdate();

        preparedStatement.close();

        return deletedMessages;
    }
}
